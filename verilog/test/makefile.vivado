###################################################################
# Makefile for Virtual PCIe Host test code in Vivado Xsim
#
# Copyright (c) 2024 Simon Southwell.
#
# This file is part of pcieVHost.
#
# pcieVHost is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# pcieVHost is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with pcieVHost. If not, see <http://www.gnu.org/licenses/>.
#
###################################################################

# User overridable variables
NUM_VPROC     = 2
ARCHFLAG      = -m64
USRSIMFLAGS   = 

# Location of VProc directory. Assumes in same directory as pcieVHost.
# Update if relocated.
VPROC_TOP     = ../../../vproc

# Define the github repository URL for the VProc virtual processor 
VPROC_REPO    = https://github.com/wyvernSemi/vproc.git

#
# PCIE VHost test defintions
#
PCIE_CLIB_DIR = ../../lib
SRCDIR        = ../../src
USRCDIR       = usercode
WORKDIR       = work

PLI_SO        = VProc.so
VPROCLIB      = libvproc.a

USER_C        = VUserMain0.cpp VUserMain1.c
PCIE_MAP_C    = pcie_vhost_map.h

#
# Flags for ModelSim
#
PCIE_TOP      = test
TOP_VC        = test.vc
HDRDIR        = ../headers

PCIE_MAP_V    = $(PCIE_MAP_C:%.h=$(HDRDIR)/%.v)

# Get OS type
OSTYPE:=$(shell uname)

#
# Flags for C compiler
#
CC            = gcc
C++           = g++
CFLAGS        = $(ARCHFLAG) -fPIC                           \
                -Wno-write-strings                          \
                -I$(SRCDIR)                                 \
                -I$(USRCDIR)                                \
                -I$(VPROC_TOP)/code                         \
                -DVPROC_SV                                  \
                -D_REENTRANT

# Set OS specific variables between Linux and Windows (MinGW)
ifeq ($(OSTYPE), Linux)
  CFLAGS_SO   = -shared -lpthread -lrt -rdynamic
  CPPSTD      = -std=c++11
else
  CFLAGS_SO   = -shared -Wl,-export-all-symbols
  CPPSTD      =
endif

#------------------------------------------------------
# Flags for simulator
#------------------------------------------------------

SIMEXE        = xsim
SIMTOP        = test

# Flags for xsim
ANALYSEFLAGS  = --prj files.prj -d DISP_LINK_WIDE -d VPROC_SV -d VIVADO -i $(VPROC_TOP) -i ../headers
ELABFLAGS     = -sv_lib $(PLI_SO) --debug typical $(SIMTOP)
SIMFLAGS      = $(SIMTOP)

#------------------------------------------------------
# BUILD RULES
#------------------------------------------------------

#
# Build the verilog and the PLI shared object by default
#
all: sysverilog

#
# Verilog. Phony target, as ModelSim does incremental compile
# and decides what the dependencies are; so always build.
#
.PHONY: verilog, pcie_c_lib, vproc_lib, clean, all

#
# Create Verilog pcieVHost VProc register mappings from C header
#
$(PCIE_MAP_V) : $(SRCDIR)/$(PCIE_MAP_C)
	@sed "s/0x/32\'h/;s/#/\`/;s/DEFINES/AUTO GENERATED\. DO NOT EDIT\!/;" < $< > $@

#
# PLI shared object
#
$(PLI_SO): vproc_lib pcie_c_lib $(wildcard $(USRCDIR)/*.[ch]*)
	@$(C++) $(CFLAGS_SO) $(CFLAGS)                      \
           -Wl,-whole-archive                               \
           -lpthread                                        \
           -L$(PCIE_CLIB_DIR) -lpcievhost                   \
           -L$(CURDIR) -lvproc                              \
           -Wl,-no-whole-archive                            \
           -o $@

#
# PCIe model library
#
pcie_c_lib:
	@$(MAKE) -f makefile.sysvlog --no-print-directory -C $(PCIE_CLIB_DIR) ARCHFLAG=$(ARCHFLAG) VPROC_TOP=$(CURDIR)/$(VPROC_TOP)

#
# VProc library.
#
vproc_lib: $(VPROC_TOP)
	@$(MAKE) --no-print-directory                       \
             -C $(VPROC_TOP)/test                           \
             -f makefile.vivado                             \
             ARCHFLAG=$(ARCHFLAG)                           \
             MAX_NUM_VPROC=$(NUM_VPROC)                     \
             USRFLAGS=-I$(CURDIR)/$(SRCDIR)                 \
             USRCDIR=$(CURDIR)/$(USRCDIR)                   \
             USER_C="$(USER_C)"                             \
             TESTDIR=$(CURDIR)                              \
             $(CURDIR)/$(VPROCLIB)

#
# Checkout VProc from github if it doesn't exist at the specified location
#
$(VPROC_TOP):
	git clone $(VPROC_REPO) $(VPROC_TOP) --recursive


#
# Build the verilog/systemverilog and the PLI shared object by default
#

# Analyse HDL files
sysverilog: $(PCIE_MAP_V) $(PLI_SO)
	@xvlog $(ANALYSEFLAGS)
	@xelab $(USRSIMFLAGS) $(ELABFLAGS)

#------------------------------------------------------
# EXECUTION RULES
#------------------------------------------------------

sim: all
	@$(SIMEXE) $(SIMFLAGS)

run: all
	@$(SIMEXE) -R $(SIMFLAGS)
 
rungui: all
	@$(SIMEXE) -g --autoloadwcfg $(SIMFLAGS)

gui: rungui

#.SILENT:
help:
	@$(info make help          Display this message)
	@$(info make               Build C/C++ and HDL code without running simulation)
	@$(info make sim           Build and run command line interactive (sim not started))
	@$(info make run           Build and run batch simulation)
	@$(info make rungui/gui    Build and run GUI simulation (sim not started))
	@$(info make clean         clean previous build artefacts)

#------------------------------------------------------
# CLEANING RULES
#------------------------------------------------------

clean: $(VPROC_TOP)
	@$(MAKE) --no-print-directory -C $(PCIE_CLIB_DIR) clean
	@$(MAKE) --no-print-directory -C $(VPROC_TOP)/test -f makefile.vivado TESTDIR=$(CURDIR) clean
	@rm -rf $(PLI_SO) $(PCIE_MAP_V) xsim* xvlog* xelab* *.wdb work


