###################################################################
# Makefile for Virtual PCIe Host test code in VCS
#
# Original Copyright (c) 2005-2024 Simon Southwell.
# Modified for VCS.
#
# This file is part of pcieVHost.
#
# pcieVHost is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# pcieVHost is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with pcieVHost. If not, see <http://www.gnu.org/licenses/>.
#
###################################################################

# User overridable variables
NUM_VPROC     = 2
ARCHFLAG      = -m64
USRSIMFLAGS   =

# Location of VProc directory. Assumes in same directory as pcieVHost.
# Update if relocated.
VPROC_TOP     = ../../../vproc

# Define the github repository URL for the VProc virtual processor
VPROC_REPO    = https://github.com/wyvernSemi/vproc.git

#
# PCIE VHost test defintions
#
PCIE_CLIB_DIR = ../../lib
SRCDIR        = ../../src
USRCDIR       = usercode
WORKDIR       = work # Kept for consistency, but VCS output is different

# VProc and PCIe libraries
VPROCLIB      = libvproc.a
PCIE_LIB      = libpcievhost.a

USER_C        = VUserMain0.cpp VUserMain1.c
PCIE_MAP_C    = pcie_vhost_map.h

#
# Flags for VCS
#
PCIE_TOP      = test
TOP_VC        = test.vc
HDRDIR        = ../headers

# VCS compile-time flags
VCSFLAGS      = -full64 -sverilog +v2k \
                -debug_acc+all \
                +define+DISP_LINK_WIDE \
                +incdir+$(VPROC_TOP) \
                -top $(PCIE_TOP) \
                -l compile.log

# VCS run-time flags
SIMVFLAGS     = $(USRSIMFLAGS) -l run.log

PCIE_MAP_V    = $(PCIE_MAP_C:%.h=$(HDRDIR)/%.v)

# Get OS type
OSTYPE:=$(shell uname)

# Check for VCS_HOME
ifndef VCS_HOME
  $(error VCS_HOME is not set. Please set it to your VCS installation path.)
endif

#
# Flags for C compiler
#
CC            = gcc
C++           = g++
# CFLAGS for C code compiled by sub-makefiles or directly by VCS
CFLAGS        = $(ARCHFLAG) -fPIC                             \
                -Wno-write-strings                            \
                -I$(SRCDIR)                                   \
                -I$(USRCDIR)                                  \
                -I$(VPROC_TOP)/code                           \
                -I$(VCS_HOME)/include                         \
                -DVCS                                         \
                -D_REENTRANT

# Set OS specific variables between Linux and Windows (MinGW)
ifeq ($(OSTYPE), Linux)
  LDFLAGS = -lpthread -lrt -rdynamic
  CPPSTD    = -std=c++11
else
  LDFLAGS = # Add windows specific libs if any
  CPPSTD    =
endif

#------------------------------------------------------
# BUILD RULES
#------------------------------------------------------

#
# Build the simv executable as default
#
all: compile

.PHONY: compile, pcie_c_lib, vproc_lib, clean, all

#
# Create Verilog pcieVHost VProc register mappings from C header
#
$(PCIE_MAP_V) : $(SRCDIR)/$(PCIE_MAP_C)
	@sed "s/0x/32\'h/;s/#/\`/;s/DEFINES/AUTO GENERATED\. DO NOT EDIT\!/;" < $< > $@

#
# Compile Verilog and C/C++ code into a single 'simv' executable
# VCS links the PLI/VPI libraries at compile time, not run time.
#
compile: $(PCIE_MAP_V) pcie_c_lib vproc_lib
	@echo "### Compiling with VCS..."
	@vcs $(VCSFLAGS) -f $(TOP_VC) \
		-CFLAGS "$(CFLAGS)" \
		-P $(VPROC_TOP)/test/pli.tab \
		-L$(PCIE_CLIB_DIR) -lpcievhost \
		-L. -lvproc $(LDFLAGS)

#
# PCIe model library
#
pcie_c_lib:
	@$(MAKE) --no-print-directory -C $(PCIE_CLIB_DIR) COMPILER=vcs VCS_HOME=$(VCS_HOME) ARCHFLAG=$(ARCHFLAG) VPROC_TOP=$(CURDIR)/$(VPROC_TOP)

#
# VProc library.
#
vproc_lib: $(VPROC_TOP)
	@$(MAKE) --no-print-directory                                  \
			 -C $(VPROC_TOP)/test                                  \
			 COMPILER=vcs                                          \
			 VCS_HOME=$(VCS_HOME)                                  \
			 ARCHFLAG=$(ARCHFLAG)                                  \
			 MAX_NUM_VPROC=$(NUM_VPROC)                            \
			 USRFLAGS="-I$(CURDIR)/$(SRCDIR) -DEXTERN_VPI_TABLE -DVCS -I$(VCS_HOME)/include" \
			 TESTDIR=$(CURDIR)                                     \
			 USRCDIR=$(CURDIR)/$(USRCDIR)                           \
			 USER_C="$(USER_C)"                                    \
			 $(CURDIR)/$(VPROCLIB)

#
# Checkout VProc from github if it doesn't exist at the specified location
#
$(VPROC_TOP):
	git clone $(VPROC_REPO) $(VPROC_TOP) --recursive


#------------------------------------------------------
# EXECUTION RULES
#------------------------------------------------------

sim: compile
	@./simv -gui $(USRSIMFLAGS)

run: compile
	@./simv $(SIMVFLAGS)

rungui: compile
	@./simv -gui $(SIMVFLAGS)

gui: rungui

help:
	@echo "make help           Display this message"
	@echo "make                Build the 'simv' executable"
	@echo "make compile        Build the 'simv' executable"
	@echo "make sim            Build and run interactive GUI simulation"
	@echo "make run            Build and run batch simulation"
	@echo "make rungui/gui     Build and run GUI simulation"
	@echo "make clean          Clean previous build artefacts"

#------------------------------------------------------
# CLEANING RULES
#------------------------------------------------------

clean:
	@if [ -d "$(VPROC_TOP)" ]; then \
		$(MAKE) --no-print-directory -C $(PCIE_CLIB_DIR) clean; \
		$(MAKE) --no-print-directory -C $(VPROC_TOP)/test TESTDIR=$(CURDIR) clean; \
	fi
	@rm -rf simv simv.* csrc ucli.key *.log transcript $(VPROCLIB) $(PCIE_MAP_V) DVEfiles/
