###################################################################
# Makefile for Virtual PCIe Host test code in Synopsys VCS
#
# This Makefile is adapted from the Vivado and Modelsim versions
# to provide a consistent build experience for VCS.
#
# Original Copyright (c) 2005-2024 Simon Southwell.
# Modified for VCS compatibility.
###################################################################

#------------------------------------------------------
# User-overridable variables
#------------------------------------------------------
NUM_VPROC     = 2
ARCHFLAG      = -m64
USRSIMFLAGS   =

# Location of VProc directory. Assumes it's a sibling to pcieVHost.
VPROC_TOP     = ../../../vproc

# VProc git repository for initial checkout
VPROC_REPO    = https://github.com/wyvernSemi/vproc.git

#------------------------------------------------------
# Project Structure Definitions
#------------------------------------------------------
PCIE_CLIB_DIR = ../../lib
SRCDIR        = ../../src
USRCDIR       = usercode
HDRDIR        = ../headers

# Libraries to be built by sub-makes
VPROCLIB      = libvproc.a
PCIE_LIB      = libpcievhost.a

# *** 변경점 (1) *** : VCS에 로드할 공유 라이브러리 파일 이름 정의
PCIE_VCS_SO   = pcievhost_vcs.so

# User C/C++ source files to be included in the vproc library build
USER_C        = VUserMain0.cpp VUserMain1.c

# C header file used to generate a Verilog header
PCIE_MAP_C    = pcie_vhost_map.h

#------------------------------------------------------
# VCS Specific Settings
#------------------------------------------------------
PCIE_TOP      = test
TOP_VC        = test.vc
PCIE_MAP_V    = $(PCIE_MAP_C:%.h=$(HDRDIR)/%.v)
OSTYPE:=$(shell uname)

ifndef VCS_HOME
  $(error VCS_HOME is not set. Please set it to your VCS installation path.)
endif

VCSFLAGS      = -full64 -sverilog +v2k \
                -debug_acc+all \
                +define+DISP_LINK_WIDE \
                +incdir+$(VPROC_TOP) \
                +incdir+$(HDRDIR) \
                -top $(PCIE_TOP) \
                -l compile.log

SIMVFLAGS     = $(USRSIMFLAGS) -l run.log

#------------------------------------------------------
# C/C++ Compiler Settings
#------------------------------------------------------
CC            = gcc
C++           = g++

CFLAGS        = $(ARCHFLAG) -fPIC \
                -Wno-write-strings \
                -I$(SRCDIR) \
                -I$(USRCDIR) \
                -I$(VPROC_TOP)/code \
                -I$(VCS_HOME)/include \
                -DVCS \
                -D_REENTRANT

ifeq ($(OSTYPE), Linux)
  LDFLAGS = -lpthread -lrt
  CPPSTD  = -std=c++11
else
  LDFLAGS =
  CPPSTD  =
endif

#------------------------------------------------------
# BUILD RULES
#------------------------------------------------------
all: compile

.PHONY: compile pcie_c_lib vproc_lib clean all

$(PCIE_MAP_V) : $(SRCDIR)/$(PCIE_MAP_C)
	@echo "### Generating Verilog header $(PCIE_MAP_V)..."
	@sed "s/0x/32\'h/;s/#/\`/;s/DEFINES/AUTO GENERATED\. DO NOT EDIT\!/;" < $< > $@

# *** 변경점 (2) *** : .a 라이브러리들을 합쳐 .so 공유 라이브러리를 만드는 규칙 추가
$(PCIE_VCS_SO): pcie_c_lib vproc_lib
	@echo "### Creating shared object $(PCIE_VCS_SO) for VCS..."
	@$(C++) $(ARCHFLAG) -shared -o $@ \
		-Wl,--whole-archive $(PCIE_CLIB_DIR)/$(PCIE_LIB) ./$(VPROCLIB) \
		-Wl,--no-whole-archive $(LDFLAGS)

# *** 변경점 (3) *** : compile 규칙을 수정하여 -load 옵션 사용
compile: $(PCIE_MAP_V) $(PCIE_VCS_SO)
	@echo "### Compiling HDL and loading VPI library with VCS..."
	@vcs $(VCSFLAGS) -file $(TOP_VC) -load ./$(PCIE_VCS_SO)

pcie_c_lib:
	@echo "### Building PCIe Host C library..."
	@$(MAKE) --no-print-directory -C $(PCIE_CLIB_DIR) -f makefile.vcs \
		VPROC_TOP=$(CURDIR)/$(VPROC_TOP)

vproc_lib: $(VPROC_TOP)
	@echo "### Building VProc C library..."
	@$(MAKE) --no-print-directory \
			-C $(VPROC_TOP)/test \
			-f makefile.vcs \
			ARCHFLAG=$(ARCHFLAG) \
			MAX_NUM_VPROC=$(NUM_VPROC) \
			USRFLAGS="-I$(CURDIR)/$(SRCDIR)" \
			USRCDIR=$(CURDIR)/$(USRCDIR) \
			USER_C="$(USER_C)" \
			TESTDIR=$(CURDIR)

$(VPROC_TOP):
	@echo "### VProc directory not found. Cloning from repository..."
	@git clone $(VPROC_REPO) $(VPROC_TOP) --recursive

#------------------------------------------------------
# EXECUTION RULES
#------------------------------------------------------
sim: compile
	@./simv -gui $(USRSIMFLAGS)

run: compile
	@./simv $(SIMVFLAGS)

rungui: compile
	@./simv -gui $(SIMVFLAGS)

gui: rungui

help:
	@echo "make help           Display this message"
	@echo "make                Build the 'simv' executable"
	# ... (help messages 생략) ...

#------------------------------------------------------
# CLEANING RULES
#------------------------------------------------------
clean:
	@echo "### Cleaning pcieVHost and VProc artifacts..."
	@if [ -d "$(PCIE_CLIB_DIR)" ]; then \
		$(MAKE) --no-print-directory -C $(PCIE_CLIB_DIR) -f makefile.vcs clean; \
	fi
	@if [ -d "$(VPROC_TOP)" ]; then \
		$(MAKE) --no-print-directory -C $(VPROC_TOP)/test -f makefile.vcs TESTDIR=$(CURDIR) clean; \
	fi
	@rm -rf simv simv.daidir csrc ucli.key *.log DVEfiles/
	@rm -rf *.vpd *.vcd *.fsdb *.vcs.* *.ddb *.simv.*
	# *** 변경점 (4) *** : clean 시 .so 파일도 삭제하도록 추가
	@rm -f $(VPROCLIB) $(PCIE_MAP_V) $(PCIE_VCS_SO)
